Index: lib/globbed.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib/globbed.js	(revision 9e87c9837730e149888f9337b6d046f4fb608bee)
+++ lib/globbed.js	(revision )
@@ -1,24 +1,70 @@
 var asap = require("pdenodeify");
 var fs = require("fs-extra");
 var glob = require("glob");
+var minimatch = require("minimatch");
 var path = require("path");
+var uniq = require("lodash.uniq");
 var copy = asap(fs.copy);
 
 module.exports = bundleAssets;
 
+var handlers = {
+	css: require("./css")
+};
+
+var pluginExp = /\!.*/;
+
+
 function bundleAssets(buildResult, options){
 	var globs = toArray(options.glob);
 	var globOpts = { nodir: true };
+	var globBasePath = path.resolve() + '/';
+	var bundlesPath = buildResult.configuration.bundlesPath;
+	var bundles = buildResult.bundles;
+	var promises = [];
 
-	var promises = globs.map(function(pattern){
+	// rewrite paths in bundles to files matching the globs we are moving
+	promises.concat(bundles.map(function(bundle){
+		var buildType = bundle.buildType;
+		var bundleName = bundle.name;
+		var bundlePath = path.join(bundlesPath, bundleName.replace(pluginExp, "").replace("bundles/", ""));
+		var handler = handlers[buildType];
 
+		if(handler) {
+			var assets = uniq(handler.find(bundle), "path");
+			var toRewrite = [];
+
+			assets.forEach(function(asset){
+				asset.src = path.join(path.dirname(bundlePath), asset.path);
+				asset.dest = path.join(bundlePath, asset.path);
+
+				var globBaseRelativePath = asset.src.replace(globBasePath, '');
+
+				for (var i = 0; i < globs.length; i++) {
+					if (minimatch(globBaseRelativePath, globs[i], globOpts)) {
+						toRewrite.push(asset);
+						break;
+					}
+				}
+			});
+
+			// rewrite the original bundle content so that the urls
+			// are pointed at the correct, production, location for assets
+			// matching the glob
+			return rewriteContent(bundle, bundlePath, handler, toRewrite);
+		}
+	}));
+
+	// move files matching the globs
+	promises.concat(globs.map(function(pattern){
+
 		return asap(glob)(pattern, globOpts).then(function(files){
 
 			return Promise.all(copyFiles(buildResult, files));
 
 		});
 
-	});
+	}));
 
 	return Promise.all(promises);
 }
@@ -40,5 +86,16 @@
 		);
 
 		return copy(file, dest);
+	});
+}
+
+function rewriteContent(bundle, bundlePath, handler, assets){
+	return asap(fs.readFile)(bundlePath, "utf8").then(function(content){
+		var newContent = handler.rewrite(content, bundlePath, assets);
+
+		if(newContent !== content) {
+			// Overwrite the content
+			return asap(fs.writeFile)(bundlePath, newContent, "utf8");
+		}
 	});
-}
+}
\ No newline at end of file
Index: test/test.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- test/test.js	(revision 9e87c9837730e149888f9337b6d046f4fb608bee)
+++ test/test.js	(revision )
@@ -88,7 +88,7 @@
 			this.bundlePromise = this.buildPromise.then(function(buildResult){
 				return bundleAssets(buildResult, {
 					infer: false,
-					glob: "test/basics/docs/**/*"
+					glob: ["test/basics/docs/**/*", "test/basics/fonts/foo.woff"]
 				});
 			});
 
@@ -100,7 +100,8 @@
 	});
 
 	it("Copies over the files provided by the glob", function(){
-		assert(exists(__dirname + "/basics/dist/docs/hello.json"), "doc copied");
+		assert(exists(__dirname + "/basics/dist/docs/hello.json"), "json copied");
+		assert(exists(__dirname + "/basics/dist/fonts/foo.woff"), "font copied");
 	});
 
 	it("infer: false prevents copying of css images", function(){
Index: package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- package.json	(revision 9e87c9837730e149888f9337b6d046f4fb608bee)
+++ package.json	(revision )
@@ -27,7 +27,8 @@
     "glob": "^7.0.5",
     "lodash.assign": "^4.2.0",
     "lodash.uniq": "^4.5.0",
+    "minimatch": "^3.0.2",
-    "pdenodeify": "^0.1.0"
+	"pdenodeify": "^0.1.0"
   },
   "devDependencies": {
     "is-there": "^4.0.0",
